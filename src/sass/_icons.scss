/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$close-name: 'close';
$close-x: 0px;
$close-y: 49px;
$close-offset-x: 0px;
$close-offset-y: -49px;
$close-width: 32px;
$close-height: 32px;
$close-total-width: 140px;
$close-total-height: 81px;
$close-image: '../img/sprite.png';
$close: (0px, 49px, 0px, -49px, 32px, 32px, 140px, 81px, '../img/sprite.png', 'close', );
$gh-h-name: 'gh-h';
$gh-h-x: 32px;
$gh-h-y: 49px;
$gh-h-offset-x: -32px;
$gh-h-offset-y: -49px;
$gh-h-width: 32px;
$gh-h-height: 32px;
$gh-h-total-width: 140px;
$gh-h-total-height: 81px;
$gh-h-image: '../img/sprite.png';
$gh-h: (32px, 49px, -32px, -49px, 32px, 32px, 140px, 81px, '../img/sprite.png', 'gh-h', );
$gh-name: 'gh';
$gh-x: 64px;
$gh-y: 49px;
$gh-offset-x: -64px;
$gh-offset-y: -49px;
$gh-width: 32px;
$gh-height: 32px;
$gh-total-width: 140px;
$gh-total-height: 81px;
$gh-image: '../img/sprite.png';
$gh: (64px, 49px, -64px, -49px, 32px, 32px, 140px, 81px, '../img/sprite.png', 'gh', );
$linkedin-h-name: 'linkedin-h';
$linkedin-h-x: 108px;
$linkedin-h-y: 0px;
$linkedin-h-offset-x: -108px;
$linkedin-h-offset-y: 0px;
$linkedin-h-width: 32px;
$linkedin-h-height: 32px;
$linkedin-h-total-width: 140px;
$linkedin-h-total-height: 81px;
$linkedin-h-image: '../img/sprite.png';
$linkedin-h: (108px, 0px, -108px, 0px, 32px, 32px, 140px, 81px, '../img/sprite.png', 'linkedin-h', );
$linkedin-name: 'linkedin';
$linkedin-x: 108px;
$linkedin-y: 32px;
$linkedin-offset-x: -108px;
$linkedin-offset-y: -32px;
$linkedin-width: 32px;
$linkedin-height: 32px;
$linkedin-total-width: 140px;
$linkedin-total-height: 81px;
$linkedin-image: '../img/sprite.png';
$linkedin: (108px, 32px, -108px, -32px, 32px, 32px, 140px, 81px, '../img/sprite.png', 'linkedin', );
$twitter-h-name: 'twitter-h';
$twitter-h-x: 34px;
$twitter-h-y: 0px;
$twitter-h-offset-x: -34px;
$twitter-h-offset-y: 0px;
$twitter-h-width: 37px;
$twitter-h-height: 30px;
$twitter-h-total-width: 140px;
$twitter-h-total-height: 81px;
$twitter-h-image: '../img/sprite.png';
$twitter-h: (34px, 0px, -34px, 0px, 37px, 30px, 140px, 81px, '../img/sprite.png', 'twitter-h', );
$twitter-name: 'twitter';
$twitter-x: 71px;
$twitter-y: 0px;
$twitter-offset-x: -71px;
$twitter-offset-y: 0px;
$twitter-width: 37px;
$twitter-height: 30px;
$twitter-total-width: 140px;
$twitter-total-height: 81px;
$twitter-image: '../img/sprite.png';
$twitter: (71px, 0px, -71px, 0px, 37px, 30px, 140px, 81px, '../img/sprite.png', 'twitter', );
$up-arrow-name: 'up-arrow';
$up-arrow-x: 0px;
$up-arrow-y: 0px;
$up-arrow-offset-x: 0px;
$up-arrow-offset-y: 0px;
$up-arrow-width: 34px;
$up-arrow-height: 49px;
$up-arrow-total-width: 140px;
$up-arrow-total-height: 81px;
$up-arrow-image: '../img/sprite.png';
$up-arrow: (0px, 0px, 0px, 0px, 34px, 49px, 140px, 81px, '../img/sprite.png', 'up-arrow', );
$spritesheet-width: 140px;
$spritesheet-height: 81px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($close, $gh-h, $gh, $linkedin-h, $linkedin, $twitter-h, $twitter, $up-arrow, );
$spritesheet: (140px, 81px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
